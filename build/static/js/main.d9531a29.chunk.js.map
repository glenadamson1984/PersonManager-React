{"version":3,"sources":["Person/Person.tsx","App.tsx","serviceWorker.ts","index.tsx","Button.module.css"],"names":["StyledDiv","styled","div","Person","props","onClick","click","name","age","children","type","onChange","change","value","App","state","persons","id","Math","floor","random","otherState","showPersons","switchNameHandler","newName","console","log","setState","nameChangedHandler","event","personIndex","findIndex","p","person","target","togglePersonHandler","doesShow","deletePersonHandler","splice","btnClass","styles","Button","this","map","index","key","push","Red","classes","length","className","join","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"skBAGA,IAAMA,E,MAAYC,EAAOC,IAAV,KAuBAC,EAVA,SAACC,GACZ,OACA,kBAACJ,EAAD,KACI,uBAAGK,QAASD,EAAME,OAAlB,MAA6BF,EAAMG,KAAnC,aAAmDH,EAAMI,IAAzD,cACA,2BAAIJ,EAAMK,UACV,2BAAOC,KAAK,OAAOC,SAAUP,EAAMQ,OAAQC,MAAOT,EAAMG,S,gBC0H/CO,E,2MAlHbC,MAAQ,CACJC,QAAS,CACT,CAACC,GAAG,YAAaV,KAAK,OAAQC,IAAI,MAClC,CAACS,GAAG,SAAUV,KAAK,QAASC,IAAI,MAChC,CAACS,GAAG,WAAYV,KAAK,SAAUC,IAAIU,KAAKC,MAAsB,GAAhBD,KAAKE,YAEnDC,WAAY,mBACZC,aAAa,G,EAGjBC,kBAAoB,SAACC,GACrBC,QAAQC,IAAI,oCACZ,EAAKC,SAAS,CACVX,QAAQ,CACV,CAACT,KAAKiB,EAAShB,IAAI,UACnB,CAACD,KAAK,QAASC,IAAI,MACnB,CAACD,KAAK,SAAUC,IAAIU,KAAKC,MAAsB,GAAhBD,KAAKE,e,EAKtCQ,mBAAqB,SAACC,EAAYZ,GAC9B,IAAMa,EAAc,EAAKf,MAAMC,QAAQe,WAAU,SAAAC,GAC7C,OAAOA,EAAEf,KAAOA,KAGdgB,EAAM,eACL,EAAKlB,MAAMC,QAAQc,IAG1BG,EAAO1B,KAAOsB,EAAMK,OAAOrB,MAE3B,IAAMG,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQc,GAAeG,EAEvB,EAAKN,SAAS,CACVX,a,EAIRmB,oBAAsB,WAClB,IAAMC,EAAW,EAAKrB,MAAMO,YAC5B,EAAKK,SAAS,CAACL,aAAcc,K,EAGjCC,oBAAsB,SAACP,GAEnB,IAAMd,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQsB,OAAOR,EAAa,GAC5B,EAAKH,SAAS,CAACX,QAASA,K,wEAGlB,IAAD,OAEDA,EAAU,KAEVuB,EAAW,CAACC,IAAOC,QAEnBC,KAAK3B,MAAMO,cACXN,EAAW,6BACN0B,KAAK3B,MAAMC,QAAQ2B,KAAI,SAACV,EAAQW,GAC7B,OAAO,kBAAC,EAAD,CAAQtC,MAAO,kBAAM,EAAK+B,oBAAoBO,IACrDrC,KAAM0B,EAAO1B,KAAMC,IAAKyB,EAAOzB,IAC/BqC,IAAKZ,EAAOhB,GACZL,OAAQ,SAACiB,GAAD,OAAgB,EAAKD,mBAAmBC,EAAOI,EAAOhB,WAgBtEsB,EAASO,KAAKN,IAAOO,MAGzB,IAAIC,EAAoB,GAQxB,OAPIN,KAAK3B,MAAMC,QAAQiC,QAAU,GAC7BD,EAAQF,KAAK,OAEbJ,KAAK3B,MAAMC,QAAQiC,QAAU,GAC7BD,EAAQF,KAAK,QAIT,yBAAKI,UAAU,OACf,qDACA,uBAAGA,UAAWF,EAAQG,KAAK,MAA3B,WAWA,4BAAQD,UAAWX,EAASY,KAAK,KACjC9C,QAAS,kBAAM,EAAK8B,wBADpB,eAGCnB,O,GA7GCoC,IAAMC,WChBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBE5InBC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,uB","file":"static/js/main.d9531a29.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledDiv = styled.div`\nwidth: 60%;\nmargin: 16px auto;\nborder: 1px solid #eee;\nbox-shadow: 0 2px 3px #ccc;\npadding: 16px;\ntext-align: center;\n\n@media (min-width: 500px) {\n        width: 450px;\n        background-color: red;\n}`;\n\nconst Person = (props: any) => {    \n    return (\n    <StyledDiv>\n        <p onClick={props.click}>im {props.name} and I am {props.age} years old</p>\n        <p>{props.children}</p>\n        <input type=\"text\" onChange={props.change} value={props.name}/>\n    </StyledDiv>\n    );\n}\n\nexport default Person;\n","import React, { useState }  from 'react';\nimport './App.css';\nimport Person from './Person/Person'\nimport styled from 'styled-components'\nimport styledComponentsTS from 'styled-components-ts'\nimport styles from './Button.module.css'\n\n// css modules is another way to appstyles at component level\n// const StyledButton = styledComponentsTS<Props>(styled.button)`\n// background-color: ${(props)  => props.alt ? 'red' : 'green'};\n// color: white;\n// font: inherit;\n// border: 1px solid blue;\n// padding: 8px;\n// cursor: pointer;\n\n// &:hover {\n//     background-color: ${(props)  => props.alt ? 'salmon' : 'green'};;\n//     color: black;\n// }\n// `;\n\ninterface Props {\n    alt?: boolean;\n}\n\ninterface State {}\n\nclass App extends React.Component<Props, State> {\n    state = {\n        persons: [    \n        {id:'jshkjhsfj', name:\"Glen\", age:\"35\"},\n        {id:'gjkjek', name:\"Laura\", age:\"32\"},\n        {id:'awsdjsdj', name:\"random\", age:Math.floor(Math.random() * 30)}\n        ],\n        otherState: \"some other value\",\n        showPersons: false\n    };\n\n    switchNameHandler = (newName: string) => {\n    console.log(\"was clicked from class component\");\n    this.setState({\n        persons:[\n      {name:newName, age:\"355555\"},\n      {name:\"Laura\", age:\"32\"},\n      {name:\"random\", age:Math.floor(Math.random() * 30)}\n    ]})};\n    // when i setState in a class based Component it essentially merges the states\n    // so notice we are not setting other state but it will remain on the object\n\n    nameChangedHandler = (event: any, id: string) => {\n        const personIndex = this.state.persons.findIndex(p => {\n            return p.id === id;\n        });\n\n        const person = {\n            ...this.state.persons[personIndex]\n        };\n\n        person.name = event.target.value;\n\n        const persons = [...this.state.persons];\n        persons[personIndex] = person;\n\n        this.setState({\n            persons\n        });\n    }\n\n    togglePersonHandler = () => {\n        const doesShow = this.state.showPersons;\n        this.setState({showPersons: !doesShow});\n    };\n\n    deletePersonHandler = (personIndex: any ) => {\n        //const persons = this.state.persons.slice();\n        const persons = [...this.state.persons];\n        persons.splice(personIndex, 1); \n        this.setState({persons: persons});\n    }\n\n    render() {\n\n        let persons = null;\n\n        let btnClass = [styles.Button];\n\n        if (this.state.showPersons) {\n            persons = (<div> \n                {this.state.persons.map((person, index) => {\n                    return <Person click={() => this.deletePersonHandler(index)} \n                    name={person.name} age={person.age}\n                    key={person.id}\n                    change={(event: any) => this.nameChangedHandler(event, person.id)}></Person>\n                })}\n                {/* <Person \n                    name={this.state.persons[0].name} \n                    age={this.state.persons[0].age}/>\n                <Person \n                    name={this.state.persons[1].name} \n                    age={this.state.persons[1].age}\n                    click={this.switchNameHandler.bind(this, \"Pete\")}\n                    change={this.nameChangedHandler}>My Hobbies: cycling</Person>\n                <Person \n                    name={this.state.persons[2].name} \n                    age={this.state.persons[2].age}/> */}\n            </div>);\n\n            // style.backgroundColor = 'red';\n            btnClass.push(styles.Red);\n        }\n\n        let classes :string[] = [];\n        if (this.state.persons.length <= 2) {\n            classes.push('red')\n        }\n        if (this.state.persons.length <= 1) {\n            classes.push('bold');\n        }\n\n        return (\n                <div className=\"App\">\n                <h1>I'm a react developer</h1>\n                <p className={classes.join(' ')}>or am i</p>\n                {/* this is one way to pass argument to a method on a react class component */}\n                {/* <button onClick={this.switchNameHandler.bind(this, \"Peter Pan\")}>switch name</button> */}\n                {/* <button \n                style={style}\n                onClick={() => this.switchNameHandler(\"Peter Pan\")}>switch name</button> */}\n                \n                {/* styled component vs css modules */}\n                {/* <StyledButton alt={this.state.showPersons}\n                onClick={() => this.togglePersonHandler()}\n                >toggle name</StyledButton> */}\n                <button className={btnClass.join(' ')}\n                onClick={() => this.togglePersonHandler()}\n                >toggle name</button>\n                {persons}\n            </div>\n        );\n    }\n  }\n\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3a872\",\"Red\":\"Button_Red__3cvoC\"};"],"sourceRoot":""}