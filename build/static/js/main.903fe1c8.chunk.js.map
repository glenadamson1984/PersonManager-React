{"version":3,"sources":["components/Persons/Person/Person.tsx","components/Persons/Persons.tsx","components/Cockpit/Cockpit.tsx","hoc/WithClass.tsx","containers/App.tsx","serviceWorker.ts","index.tsx","Button.module.css"],"names":["StyledDiv","styled","div","Person","props","inputEleRef","React","createRef","this","current","focus","console","log","isAuth","onClick","click","name","age","children","key","ref","type","onChange","change","value","Component","Persons","prevProps","prevState","message","snapshot","persons","map","person","index","clicked","id","event","changed","isAuthenticated","PureComponent","memo","toggleButtonRef","useRef","document","createElement","useEffect","classes","btnClass","styles","Button","showPersons","push","Red","personsLength","className","title","join","login","withClass","App","state","Math","floor","random","otherState","showCockpit","authenticated","switchNameHandler","newName","setState","nameChangedHandler","personIndex","findIndex","p","target","togglePersonHandler","doesShow","deletePersonHandler","splice","loginHandler","nextProps","nextState","WithClass","appTitle","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.903fe1c8.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport styled from 'styled-components'\n\nconst StyledDiv = styled.div`\nwidth: 60%;\nmargin: 16px auto;\nborder: 1px solid #eee;\nbox-shadow: 0 2px 3px #ccc;\npadding: 16px;\ntext-align: center;\n\n@media (min-width: 500px) {\n        width: 450px;\n        background-color: red;\n}`;\n\ninterface Props {\n    click?: any,\n    name: any,\n    age: any,\n    change?: any,\n    isAuth?: any,\n}\n\ninterface State {}\nclass Person extends Component<Props, State> {\n    inputEleRef: any;\n    constructor(props: any) {\n        super(props);\n        this.inputEleRef = React.createRef();\n    }\n    \n    componentDidMount() {\n        this.inputEleRef.current.focus();\n    }\n\n    render() {\n        console.log(`Person.tsx - rendering`);\n        return (\n        <StyledDiv>\n            {this.props.isAuth ? <p>Authenticated!</p> : <p>please log in</p>}\n            <p onClick={this.props.click}>im {this.props.name} and I am {this.props.age} years old</p>\n            <p>{this.props.children}</p>\n            <input\n            key=\"i3\"\n            ref={this.inputEleRef}\n            type=\"text\" onChange={this.props.change} value={this.props.name}/>\n        </StyledDiv>\n        );\n    }\n}\n\nexport default Person;\n","import React, {PureComponent} from 'react'\nimport Person from './Person/Person';\n \ninterface Props {\n    persons: any,\n    clicked: any,\n    changed: any,\n    isAuthenticated?: any,\n}\n\ninterface State {}\nclass Persons extends PureComponent<Props, State> {\n\n    // static getDerivedStateFromProps(props: any, state: any) {\n    //     console.log(`Persons.tsx - getDerivedStateFromProps ${props}`);\n    //     return state;\n    // }\n\n// we can use shouldComponentUpdate as before but if we want to check every property\n// for a change we can actually make use of a Pure Component which then handles this \n// for us by extending a differenct Class from React\n\n    // shouldComponentUpdate(nextProps: any, nextState: any) {\n    //     console.log(`Persons.tsx - shouldComponentUpdate ${nextProps}`);\n    //     if (nextProps.persons !== this.props.persons) {\n    //         return true;\n    //     } else {\n    //         return false;\n    //     }\n\n    // }\n\n    getSnapshotBeforeUpdate(prevProps: any, prevState: any) {\n        console.log(`Persons.tsx - getSnapshotBeforeUpdate`);\n        return {message: \"snapshot\"};\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\n        console.log(`Persons.tsx - componentDidUpdate`);\n        console.log(snapshot);\n    }\n\n    componentWillUnmount() {\n        console.log(`Persons.tsx - componentWillUnmount`);\n    }\n\n    render () {\n        console.log(`Persons.tsx - rendering`);\n        return this.props.persons.map((person: any, index: number) => {\n            return <Person click={() => this.props.clicked(index)} \n            name={person.name} age={person.age}\n            key={person.id}\n            change={(event: any) => this.props.changed(event, person.id)}\n            isAuth={this.props.isAuthenticated}></Person>\n        });\n    }\n}\n\nexport default Persons;\n","import React, {useEffect, useRef} from 'react'\nimport styles from '../../Button.module.css'\nimport './Cockpit.css';\n\nconst Cockpit = (props: any) => {    \n    \n    const toggleButtonRef = useRef(document.createElement(\"button\"));\n    // useEffect(() => {\n    //     console.log(`Cockpit.tsk - useEffect`);\n\n    //     setTimeout(() => {\n    //         alert(\"saved data to cloud\");\n    //     }, 1000);\n    // }, [props.persons]);\n\n    useEffect(() => {\n        console.log(`Cockpit.tsk - useEffect`);\n\n        // const timer = setTimeout(() => {\n        //     alert(\"saved data to cloud\");\n        // }, 1000);\n\n        if (toggleButtonRef !== null) {\n            toggleButtonRef.current.click();\n        }\n\n\n        return () => {\n            // clearTimeout(timer);\n            console.log(`Cockpit.tsk - should do all cleanup work here`);\n        }\n    }, []);\n\n    useEffect(() => {\n        console.log(`Cockpit.tsk - 2nd useEffect`);\n\n        return () => {\n            console.log(`Cockpit.tsk - 2nd should do all cleanup work here`);\n        }\n    });\n\n    let classes :string[] = [];\n    let btnClass = [styles.Button];\n\n    if(props.showPersons) {\n        btnClass.push(styles.Red);\n    }\n    \n    if (props.personsLength <= 2) {\n        classes.push('red')\n    }\n    if (props.personsLength <= 1) {\n        classes.push('bold');\n    }\n\n    return (\n        <div className='Cockpit'>\n        <h1>{props.title}</h1>\n        <p className={classes.join(' ')}>or am i</p>\n        <button\n        ref={toggleButtonRef}\n        className={btnClass.join(' ')}\n        onClick={props.clicked}>toggle name</button>\n        <button onClick={props.login}></button>\n        </div>\n    );\n}\n\n// functional components don't have a react hook for shouldComponentUpdate\n// but we can wrap the component with React.memo and if nothing changes in \n// the component then it's not re-rendered\nexport default React.memo(Cockpit);","import React from 'react';\n\nconst withClass = (props: any) => (\n    <div className={props.classes}>\n        {props.children}\n    </div>\n);\n\nexport default withClass;","import React, { useState, Component }  from 'react';\nimport './App.css';\nimport Person from '../components/Persons/Person/Person'\nimport styled from 'styled-components'\nimport styledComponentsTS from 'styled-components-ts'\nimport styles from '../Button.module.css'\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport WithClass from '../hoc/WithClass'\n\n// css modules is another way to appstyles at component level\n// const StyledButton = styledComponentsTS<Props>(styled.button)`\n// background-color: ${(props)  => props.alt ? 'red' : 'green'};\n// color: white;\n// font: inherit;\n// border: 1px solid blue;\n// padding: 8px;\n// cursor: pointer;\n\n// &:hover {\n//     background-color: ${(props)  => props.alt ? 'salmon' : 'green'};;\n//     color: black;\n// }\n// `;\n\ninterface Props {\n    appTitle: string;\n    alt?: boolean;\n}\n\ninterface State {}\n\nclass App extends Component<Props, State> {\n    constructor(props: any) {\n        super(props);\n        console.log(`App.tsx - Constructor`);\n    }\n\n    state = {\n        persons: [    \n        {id:'jshkjhsfj', name:\"Glen\", age:\"35\"},\n        {id:'gjkjek', name:\"Laura\", age:\"32\"},\n        {id:'awsdjsdj', name:\"random\", age:Math.floor(Math.random() * 30)}\n        ],\n        otherState: \"some other value\",\n        showPersons: false,\n        showCockpit: true,\n        authenticated: false,\n    };\n\n    static getDerivedStateFromProps(props: any,state: any) {\n        console.log(`App.tsx - getDerivedStateFromProps ${props}`);\n        return state;\n    }\n\n    componentDidMount() {\n        console.log(`app.tsx - componentDidMount`);\n    }\n\n    shouldComponentUpdate(nextProps: any , nextState: any) {\n        console.log(`app.tsx - ssssshouldComponentUpdate`);\n        return true;\n    }\n\n    componentDidUpdate() {\n        console.log(`app.tsx - componentDidUpdate`);\n    }\n\n    switchNameHandler = (newName: string) => {\n    console.log(\"was clicked from class component\");\n    this.setState({\n        persons:[\n      {name:newName, age:\"355555\"},\n      {name:\"Laura\", age:\"32\"},\n      {name:\"random\", age:Math.floor(Math.random() * 30)}\n    ]})};\n    // when i setState in a class based Component it essentially merges the states\n    // so notice we are not setting other state but it will remain on the object\n\n    nameChangedHandler = (event: any, id: string) => {\n        const personIndex = this.state.persons.findIndex(p => {\n            return p.id === id;\n        });\n\n        const person = {\n            ...this.state.persons[personIndex]\n        };\n\n        person.name = event.target.value;\n\n        const persons = [...this.state.persons];\n        persons[personIndex] = person;\n\n        this.setState({\n            persons\n        });\n    }\n\n    togglePersonHandler = () => {\n        const doesShow = this.state.showPersons;\n        this.setState({showPersons: !doesShow});\n    };\n\n    deletePersonHandler = (personIndex: any ) => {\n        //const persons = this.state.persons.slice();\n        const persons = [...this.state.persons];\n        persons.splice(personIndex, 1); \n        this.setState({persons: persons});\n    }\n\n    loginHandler = () => {\n        this.setState({authenticated: true});\n    }\n\n    render() {\n        console.log(`App.tsx - render`);\n        let persons = null;\n\n        let btnClass = [styles.Button];\n\n        if (this.state.showPersons) {\n            persons = <Persons persons={this.state.persons}\n                clicked={this.deletePersonHandler}\n                changed={this.nameChangedHandler}\n                isAuthenticated={this.state.authenticated}/>;\n\n            btnClass.push(styles.Red);\n        }\n\n        return (\n                <WithClass classes=\"App\">\n                <button onClick={() => {this.setState({showCockpit: false})}}>Remove Cockpit</button>\n                {this.state.showCockpit ? <Cockpit \n                title={this.props.appTitle}\n                showPersons={this.state.showPersons} \n                personsLength={this.state.persons.length}\n                clicked={this.togglePersonHandler}\n                login={this.loginHandler} /> : null }\n                {persons}\n            </WithClass>\n        );\n    }\n  }\n\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App appTitle=\"Person Manager\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3a872\",\"Red\":\"Button_Red__3cvoC\"};"],"sourceRoot":""}